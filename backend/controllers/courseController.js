const pool = require('../config/db');

// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞
async function createCourse(req, res) {
  try {
    const {
      title,
      description,
      details,
      price,
      duration,
      cover_url,
      category,
      is_published = false
    } = req.body;

    const authorId = req.user.id;

    const query = `
      INSERT INTO courses (title, description, details, price, duration, cover_url, category, author_id, is_published)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING *
    `;
    const values = [
      title,
      description,
      details,
      price,
      duration,
      cover_url,
      category,
      authorId,
      is_published
    ];

    const { rows } = await pool.query(query, values);
    res.status(201).json(rows[0]);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞' });
  }
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
async function getAllPublishedCourses(req, res) {
  try {
    const query = `SELECT * FROM courses WHERE is_published = true ORDER BY created_at DESC`;
    const { rows } = await pool.query(query);
    res.json(rows);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤' });
  }
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ ID —Å –º–æ–¥—É–ª—è–º–∏ –∏ —É—Ä–æ–∫–∞–º–∏
async function getCourseById(req, res) {
  try {
    const courseId = req.params.id;

    const courseQuery = `SELECT * FROM courses WHERE id = $1`;
    const modulesQuery = `SELECT * FROM modules WHERE course_id = $1 ORDER BY position`;
    const lessonsQuery = `SELECT * FROM lessons WHERE module_id = ANY($1::uuid[]) ORDER BY position`;

    const { rows: courseRows } = await pool.query(courseQuery, [courseId]);
    if (courseRows.length === 0) return res.status(404).json({ error: '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const course = courseRows[0];

    const { rows: moduleRows } = await pool.query(modulesQuery, [courseId]);
    const moduleIds = moduleRows.map((m) => m.id);

    const { rows: lessonRows } = await pool.query(lessonsQuery, [moduleIds]);

    const modulesWithLessons = moduleRows.map((module) => ({
      ...module,
      lessons: lessonRows.filter((lesson) => lesson.module_id === module.id),
    }));

    res.json({ ...course, modules: modulesWithLessons });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞' });
  }
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
async function getMyCourses(req, res) {
  try {
    const authorId = req.user.id;
    const query = `SELECT * FROM courses WHERE author_id = $1 ORDER BY created_at DESC`;
    const { rows } = await pool.query(query, [authorId]);
    res.json(rows);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤' });
  }
}

// üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∫ –∫—É—Ä—Å—É
async function addModuleToCourse(req, res) {
  try {
    const { courseId } = req.params;
    const { title, description, position } = req.body;

    const query = `
      INSERT INTO modules (course_id, title, description, position)
      VALUES ($1, $2, $3, $4)
      RETURNING *
    `;
    const values = [courseId, title, description, position];
    const { rows } = await pool.query(query, values);
    res.status(201).json(rows[0]);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è' });
  }
}

// üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∫ –º–æ–¥—É–ª—é
async function addLessonToModule(req, res) {
  try {
    const { moduleId } = req.params;
    const { title, description, type, content_url, position } = req.body;

    const query = `
      INSERT INTO lessons (module_id, title, description, type, content_url, position)
      VALUES ($1, $2, $3, $4, $5, $6)
      RETURNING *
    `;
    const values = [moduleId, title, description, type, content_url, position];
    const { rows } = await pool.query(query, values);
    res.status(201).json(rows[0]);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞' });
  }
}

module.exports = {
  createCourse,
  getAllPublishedCourses,
  getCourseById,
  getMyCourses,
  addModuleToCourse,
  addLessonToModule
};
